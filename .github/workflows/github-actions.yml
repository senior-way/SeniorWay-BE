name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle cache (옵션)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. 기존 application-secret.yml 삭제 후 새로 생성
      - name: recreate application-secret.yml
        run: |
          rm -f ./src/main/resources/application-secret.yml
          mkdir -p ./src/main/resources
          printf "%s\n" "${{ secrets.YML }}" > ./src/main/resources/application-secret.yml

      # 5. Debug: 파일 내용 확인 (Secrets는 로그에서 ***로 나옴)
      - name: Debug application-secret.yml
        run: |
          echo "Debug: application-secret.yml created"
          ls -l ./src/main/resources/
          cat ./src/main/resources/application-secret.yml | head -n 

      # 5-1. Debug: Kakao redirect-uri 확인
      - name: Debug Kakao redirect-uri
        run: |
          REDIRECT_URI=$(grep 'redirect-uri' ./src/main/resources/application-secret.yml | awk '{print $2}')
          echo "Kakao redirect-uri: $REDIRECT_URI"

      # 6. Gradle build
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 7. Docker build & push (main 브랜치만)
      - name: Docker build & push to prod
        if: github.ref == 'refs/heads/main'
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/senior-way:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/senior-way:latest

      # 8. Deploy to EC2 (prod)
      - name: Deploy to prod
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/senior-way:latest")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/senior-way:latest
            sudo docker run -d -p 8080:8080 --name seniorway ${{ secrets.DOCKER_USERNAME }}/senior-way:latest
            sudo docker image prune -f

      # 9. Dev branch는 배포 안 함
      - name: Skip deploy for dev
        if: github.ref == 'refs/heads/dev'
        run: echo "Dev branch build completed. No deploy executed."
