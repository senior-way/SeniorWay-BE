name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle cache
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. application-secret.yml 생성 (Secrets에서 가져오기)
      - name: make application-secret.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          printf "%s" "${{ secrets.YML }}" > application.yml

      # 5. Gradle build
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 6. Docker build & push (main 브랜치만)
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/senior-way:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/senior-way:latest

      # 7. Deploy to EC2 (prod)
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # 기존 컨테이너 중지 및 삭제
            CONTAINER_ID=$(sudo docker ps -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/senior-way:latest")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            # 최신 이미지 pull & 실행
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/senior-way:latest
            sudo docker run -d -p 8080:8080 --name seniorway ${{ secrets.DOCKER_USERNAME }}/senior-way:latest

            # 사용하지 않는 이미지 정리
            sudo docker image prune -f

      # 8. Dev 서버는 배포 안 함
      - name: Skip deploy for dev
        if: contains(github.ref, 'dev')
        run: echo "Dev branch build completed. No deploy executed."
